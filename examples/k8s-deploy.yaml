apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: client
  name: client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: client
    spec:
      containers:
      - env:
        - name: SERVER_URL
          value: 'envoy:8080'
        image: grpc-codegen:latest
        imagePullPolicy: Never
        name: client
        command:
          - node
          - dynamic_codegen/index.js
        resources: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: envoy
  name: envoy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: envoy
    spec:
      containers:
      - image: grpc-envoy:latest
        imagePullPolicy: Never
        name: envoy
        resources: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: server
  name: server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: server
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: server
    spec:
      containers:
      - image: grpc-codegen:latest
        imagePullPolicy: Never
        command:
          - node
          - dynamic_codegen/greeter_server.js
        name: server
        resources: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: server
  name: server
spec:
  ports:
  - name: http
    port: 50051
    protocol: TCP
    targetPort: 50051
  selector:
    app: server
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: envoy
  name: envoy
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: envoy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: client
  name: client
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: client
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  name: client
spec:
  defaultBackend:
    service:
      name: client
      port:
        number: 3000
  rules:
  - http:
      paths:
      - backend:
          service:
            name: client
            port:
              number: 3000
        path: /
        pathType: Prefix
status:
  loadBalancer: {}
